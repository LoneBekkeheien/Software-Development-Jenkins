#!/usr/bin/env groovy

pipeline
{
	agent any
		//Is it correct with "any" here ?

	/*
	parameters
	{
		string(name: "currentBuild.result", defaultValue: 'SUCCESS')
	}
	*/

	stages
	{
		stage('Build + javadoc + war')
		{
			steps
			{
			script{
				if(isUnix()){
				dir('project/CMS_asp')
				{
					sh 'gradle build'
					sh 'gradle war'
					sh 'gradle javadoc'
				}
			}else{
			dir('project/CMS_asp')
			{
				bat 'gradle build'
				bat 'gradle war'
				bat 'gradle javadoc'
			}
		}
	}
}
}

		stage('Parallel stage')
		{
			parallel
			{
				stage('Archive Files')
				{
					steps
					{

						dir('project/CMS_asp')
						{
							archiveArtifacts 'build/libs/CMS_asp-1.0.war'
						}
					}
				}

				stage('Unit Test')
				{
					steps
					{
					script{

						if(isUnix()){

						dir('project/CMS_asp')
						{
							sh 'gradle cleanTest test'
							publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: 'build/reports/test', reportFiles: 'index.html', reportName: 'HTML Report - Unit Test', reportTitles: ''])
							junit allowEmptyResults: true, testResults: 'build/test-results/test/*.xml'								}

						}else{

						dir('project/CMS_asp')
						{
							bat 'gradle cleanTest test'
							publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: 'build/reports/test', reportFiles: 'index.html', reportName: 'HTML Report - Unit Test', reportTitles: ''])
							junit allowEmptyResults: true, testResults: 'build/test-results/test/*.xml'								}
						}

					}

					}
				}

				stage('Code Quality and Integration Test')  // See 2.3 of the project description
				{
					steps{
					script{
						if(isUnix()){
						dir('project/CMS_asp')
						{
							sh 'gradle cleanIntegrationTest integrationTest'
								publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: 'build/reports/integrationTest', reportFiles: 'index.html', reportName: 'HTML Report - Integration Test', reportTitles: ''])
						}

						}else{
						dir('project/CMS_asp')
						{
							bat 'gradle cleanIntegrationTest integrationTest'

								publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: 'build/reports/integrationTest', reportFiles: 'index.html', reportName: 'HTML Report - Integration Test', reportTitles: ''])
						}
						}

					}

					}
				}

stage("FindBugs") {
	steps{

step([$class: 'FindBugsPublisher', healthy: '20',  pattern: '**/main.xml', 	unHealthy: '50', canRunOnFailed: true])

	}
}

	stage("Checkstyle") {
		steps{
									 step([$class: 'CheckStylePublisher',
										 canRunOnFailed: true,
										 defaultEncoding: '',
										 healthy: '20',  //healthy om det er mindre warnings enn 20
										 pattern: '**\\CMS_asp\\build\\reports\\checkstyle\\main.xml',
										 unHealthy: '50', //uhealthy om der er mer warnings enn 50
									 ])
							 }
					}

				stage('Coverage report')
				{

					steps
					{

						step([$class: 'JacocoPublisher',
							buildOverBuild: true, //this line will Fail the build if coverage degrades more than the delta thresholds
							 	//Check this to set the build status to unstable if coverage thresholds are violated.
						/*	minimumInstructionCoverage: '50', //minimum score of instruction coverage
							maximumInstructionCoverage: '100',
							classPattern: '**\\CMS_asp\\build\\classes\\java\\test\\pt\\isep\\cms\\students\\*.class',
							execPattern: '**\\CMS_asp\\build\\jacoco\\integrationTest.exec',
							sourcePattern: '**\\CMS_asp\\src\\test\\java\\pt\\isep\\cms\\students\\*.java',
							maximumBranchCoverage: '100',
							maximumClassCoverage: '100',
							maximumComplexityCoverage: '100',
							maximumInstructionCoverage: '100',
							maximumLineCoverage: '100',
							maximumMethodCoverage: '100',
							minimumBranchCoverage: '50',
							minimumClassCoverage: '50',
							minimumComplexityCoverage: '50',
							minimumInstructionCoverage: '50',
							minimumLineCoverage: '50',
							minimumMethodCoverage: '50',*/
							healthy: '10',
							unhealthy: '30',
							deltaBranchCoverage: '20',
							deltaClassCoverage: '20',
							deltaComplexityCoverage: '20',
							deltaInstructionCoverage: '20',
							deltaLineCoverage: '20',
							deltaMethodCoverage: '20',
						])
						dir('project/CMS_asp')
						{
						//	jacoco()
						}
					}
				}

				stage('Copy war file to tomcat')
				{
					steps
					{
					script{
							if(isUnix()){
							dir('project/CMS_asp')
							{
								sh 'cp /y build\\libs\\*.war C:\\Users\\Public\\apache-tomcat-7.0.91\\webapps'
								sh ("curl --user LoneBekk:hohoho http://localhost:8001/")
							}

							}else{

							dir('project/CMS_asp')
							{
								bat 'copy /y build\\libs\\*.war C:\\Users\\Public\\apache-tomcat-7.0.91\\webapps'
								bat ("curl --user LoneBekk:hohoho http://localhost:8001/")
							}
							}


					}

					}
				}

			}// parallel

		}// Stage parallel

		stage('Mutation Tests')
		{
			steps
			{
			script{
					if(isUnix()){
					dir('project/CMS_asp')
					{
						sh 'gradle pitest'
						publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: '\\build\\reports\\pitest', reportFiles: 'index.html', reportName: 'HTML Report - Pit Test Coverage Report', reportTitles: ''])
					}

					}else{

					dir('project/CMS_asp')
					{
						bat 'gradle pitest'
						publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: '\\build\\reports\\pitest', reportFiles: 'index.html', reportName: 'HTML Report - Pit Test Coverage Report', reportTitles: ''])
					}
					}

			}

			}
		}

		stage('Parallel Stage 2')
		{

			parallel
			{
				stage('Email notification')
				{


					  steps
					  {
						// send to email
				        emailext (body: """<p>Please proceed to Jenkins in order to perform a Manual Test or to see the Errors. Jenkins will wait for the user manual confirmation if there are no Errors.</p> <p>Check console output at "<a href="${env.BUILD_URL}">${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>"</p>""",
				        subject: "Build was a SUCCESS : " + currentBuild.fullDisplayName,
				        to: '1180241@isep.ipp.pt')

					  }
				}

				stage('Manual confirmation')
				{
					steps
					{
						input message: "Please perform a manual test and confirm by clicking the button below '${env.WORKSPACE}'", ok: 'Confirm'
					}
				}

			}//parallel

		}//Stage parallel 2

		stage('Documentaion and Containerisation') // See 2.2 of the project description
		{
			steps
			{
				echo 'Documentaion and Containerisation'
			}
		}




		stage('Acceptance Test and Smoke Test') // See 2.4 of the project description
		{
			steps
			{
				echo 'Acceptance Test and Smoke Test'
			}
		}

		stage('Continuous Deployment') // See 2.5 of the project description
		{
			steps
			{
				echo 'Continuous Deployment'
			}
		}
	}//stages

	post
	{
		success
		{
			script{
			if(isUnix()){
				sh("git tag -a LONEProjectBuild#${env.BUILD_NUMBER}-SUCCESS -m 'Jenkins'")
			}else{
				bat("git tag -a LONEProjectBuild#${env.BUILD_NUMBER}-SUCCESS -m 'Jenkins'")

			}
		}
	}
		failure
		{
			script{
				if(isUnix()){
					sh("git tag -a LONEProjectBuild#${env.BUILD_NUMBER}-FAILURE -m 'Jenkins'")
				}else{
					bat("git tag -a LONEProjectBuild#${env.BUILD_NUMBER}-FAILURE -m 'Jenkins'")
				}
			}
		}
		always
		{



	//bat 'git config credential.helper "/bin/bash ' + env.WORKSPACE + '/project/credential-helper.sh"' LONE DONT NEED THIS ONE, MAYBE, APPARENTLY

		// credentialsId here is the credentials you have set up in Jenkins for pushing
	  // to that repository using username and password.
	  withCredentials([[
					$class: 'UsernamePasswordMultiBinding',
					credentialsId: '94be0be5-068f-4bd8-b8f0-86b2fcd3f9cf',
					usernameVariable: 'GIT_USERNAME',
					passwordVariable: 'GIT_PASSWORD'
		]]) {
		script{
			if(isUnix()){
				sh('git push origin --tags')
			}else{
				bat('git push origin --tags')
			}
		}
	}
			//sh 'git config --local --unset credential.helper' // dont need for Konstantin or Lone
		}
	}

}//pipeline
